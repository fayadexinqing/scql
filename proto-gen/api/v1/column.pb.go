// Copyright 2024 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: api/v1/column.proto

package scql

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Column Data Type
// Column DataType values are subset of [data types in secretflow
// spec](https://github.com/secretflow/spec/blob/main/secretflow/spec/v1/data.proto#L116)
type DataType int32

const (
	DataType_DataType_UNSPECIFIED DataType = 0
	DataType_BOOL                 DataType = 1 // reserved datatype, not supported yet, use INT32 instead
	DataType_INT8                 DataType = 2 // reserved datatype, not supported yet, use INT32 instead
	DataType_INT16                DataType = 3 // reserved datatype, not supported yet, use INT32 instead
	DataType_INT32                DataType = 4
	DataType_INT64                DataType = 5
	DataType_FLOAT32              DataType = 6
	DataType_FLOAT64              DataType = 7
	DataType_INT                  DataType = 8  // alias for INT32
	DataType_INTEGER              DataType = 9  // alias for INT32
	DataType_FLOAT                DataType = 10 // alias for FLOAT32
	DataType_DOUBLE               DataType = 11 // alias for FLOAT64
	DataType_STRING               DataType = 12
	DataType_STR                  DataType = 13 // alias for STRING
	DataType_DATETIME             DataType = 14
	DataType_TIMESTAMP            DataType = 15
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "DataType_UNSPECIFIED",
		1:  "BOOL",
		2:  "INT8",
		3:  "INT16",
		4:  "INT32",
		5:  "INT64",
		6:  "FLOAT32",
		7:  "FLOAT64",
		8:  "INT",
		9:  "INTEGER",
		10: "FLOAT",
		11: "DOUBLE",
		12: "STRING",
		13: "STR",
		14: "DATETIME",
		15: "TIMESTAMP",
	}
	DataType_value = map[string]int32{
		"DataType_UNSPECIFIED": 0,
		"BOOL":                 1,
		"INT8":                 2,
		"INT16":                3,
		"INT32":                4,
		"INT64":                5,
		"FLOAT32":              6,
		"FLOAT64":              7,
		"INT":                  8,
		"INTEGER":              9,
		"FLOAT":                10,
		"DOUBLE":               11,
		"STRING":               12,
		"STR":                  13,
		"DATETIME":             14,
		"TIMESTAMP":            15,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_column_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_api_v1_column_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_column_proto_rawDescGZIP(), []int{0}
}

var File_api_v1_column_proto protoreflect.FileDescriptor

var file_api_v1_column_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2a, 0xd2, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x09, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x0c, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x52, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41,
	0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x0f, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x73, 0x63, 0x71, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x63, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_v1_column_proto_rawDescOnce sync.Once
	file_api_v1_column_proto_rawDescData = file_api_v1_column_proto_rawDesc
)

func file_api_v1_column_proto_rawDescGZIP() []byte {
	file_api_v1_column_proto_rawDescOnce.Do(func() {
		file_api_v1_column_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_column_proto_rawDescData)
	})
	return file_api_v1_column_proto_rawDescData
}

var file_api_v1_column_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_column_proto_goTypes = []interface{}{
	(DataType)(0), // 0: scql.api.v1.DataType
}
var file_api_v1_column_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_v1_column_proto_init() }
func file_api_v1_column_proto_init() {
	if File_api_v1_column_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_column_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_column_proto_goTypes,
		DependencyIndexes: file_api_v1_column_proto_depIdxs,
		EnumInfos:         file_api_v1_column_proto_enumTypes,
	}.Build()
	File_api_v1_column_proto = out.File
	file_api_v1_column_proto_rawDesc = nil
	file_api_v1_column_proto_goTypes = nil
	file_api_v1_column_proto_depIdxs = nil
}
